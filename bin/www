#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('updatecode:server');
var fs = require('fs');

var http = require('http');

var https = require('https');


var privateKey = `-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDB2DtIKNC1TTlh
jr7hedoqxkit5Xz+j5qX9pQbcix8kv+1g6LmG8i2WB3TBC5LdKWbt1R7j7OJRrnq
Fzt2IIlpa37RQA+UUK7tUtzjoH5oDTfoQ77v3ujl+D4zoYsbApEHp55ne++TGWSx
QVAGrnPn8HtmGPhbByADPFKbvI+spCA8hGcNlyhnPJ0f2pf2RmNiVHZVHWwh3zGp
1OlXrwoaFZywnu/w9r5QdDnAzUyvTLWw2Be3FZPZ6MBH9rcBdWKPzzEVnXVYYTIm
Y6Aycfxx2gxrLQcD6uIef9f02ByIvix7krPo4T6sCOUKWfnGdCQ3NlFC0dQR2tB6
sdMPALoPAgMBAAECggEAA6k88daeLEdScFd7LTfngEg0qBezRuDgWF9L2iVLq5P8
8wyvMvFkSJ8kGCwvJzWuHppVlpbzU8lNSn7/nIBuJjACASm8IZemS3fZLfGif8V8
lbfDnabXsCA7QdnwHGy036JcJcH7s+6kn8RqsLy53XciK7sIjqwDVW/dyHCMJ+fg
Tvy8fP6gCDw1msVMPyQyTapZusKjZTmNND0DubARb+FkeuNapq6KR0JzKPo5bA8u
BRXskO75Yj3eOIR0WglV3jgQRisGSnuLQZXghOdiNe8mQZNmlQFrx7Xzu2feMbSc
w5c3LyjxLGap4vJv+2aOnF2aHbUUEY/Ff52PCXMR4QKBgQD2QS5WAg7oglfgGWqq
c4jcd7s28gDC1xB3O2v080OyI5o5KL3ju2iQSgnMEH1P4x1bD1ViFHJCeImBk3ul
VxOWIQxFDKUzNwFWKNIVD6HIJE5dqqgzXEZDDwMT12R2sMNXXWA5QwiATL6WF5xd
PVtJBkBVtliinoJskiAJW1GLqwKBgQDJhBUYUQYnIJealPU7jX7QWAiBVy2WqRtB
dfLAcxPU/GxUw/AUhUfA6QjEfRoVyZQhCJDMqwGEa7ri7x/jMJr+QQt7zCvSr6gG
gAu7GFq6gsMp3jv+IViINr8/j1UqtjdD7sUpojxRKwVaqCAwPXj1D12dqAhQhn93
nUwdXwyHLQKBgEunPrsBqt7XnHOmm1R+Zh+FUSjSNFWniNF4mfQJAFUsBudkkuHx
42/grx3YOwdd+NjO3yZgrbGqImSCkMv88nF++awE9IPFdE2qANCjmspIDSNNmJse
0B8t734bACxOpdSjRTqSU3xHF4449rrWbMMEfqNWf+iF1f/Q7LKzMVw9AoGAJmVD
O7HccUIVgL+XBjTMj9fmLva0Wft4lP1rNl32zmMWJQR8TvyiElCUehO4D6Sr06t1
I3oFvPxlzG1xbvFI5t7v2DOrueX8Jtjo40odp2HY27ZbSe2Cl9mOkQa3XH8BgrEQ
4gDmazS+PWrBT0+3J0I5PRvSEb2+tcTDxujgUzUCgYAenJ7nX+sNiI7FuwK0/feW
1I4FMHaFbhfFhVNYmIC5hT0R3aDjJ0+iy6AJqW6zj4GsCyt2lY8LaHgNTuHQQTtZ
A9HQr+PK22l+Fpph3RdRIcgKATryiCWMgTSDOV4w2VAbZ7Tdkx66mClMDf7guKOB
xLvIYTguX6eTUhA2Y2hnAw==
-----END PRIVATE KEY-----
`
var certificate = `-----BEGIN CERTIFICATE-----
MIIEljCCA36gAwIBAgIUDgWRCxjldInjSDWqDxngkHdon04wDQYJKoZIhvcNAQEL
BQAwgYsxCzAJBgNVBAYTAlVTMRkwFwYDVQQKExBDbG91ZEZsYXJlLCBJbmMuMTQw
MgYDVQQLEytDbG91ZEZsYXJlIE9yaWdpbiBTU0wgQ2VydGlmaWNhdGUgQXV0aG9y
aXR5MRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRMwEQYDVQQIEwpDYWxpZm9ybmlh
MB4XDTIxMDkwMzA5MzkwMFoXDTM2MDgzMDA5MzkwMFowYjEZMBcGA1UEChMQQ2xv
dWRGbGFyZSwgSW5jLjEdMBsGA1UECxMUQ2xvdWRGbGFyZSBPcmlnaW4gQ0ExJjAk
BgNVBAMTHUNsb3VkRmxhcmUgT3JpZ2luIENlcnRpZmljYXRlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwdg7SCjQtU05YY6+4XnaKsZIreV8/o+al/aU
G3IsfJL/tYOi5hvItlgd0wQuS3Slm7dUe4+ziUa56hc7diCJaWt+0UAPlFCu7VLc
46B+aA036EO+797o5fg+M6GLGwKRB6eeZ3vvkxlksUFQBq5z5/B7Zhj4WwcgAzxS
m7yPrKQgPIRnDZcoZzydH9qX9kZjYlR2VR1sId8xqdTpV68KGhWcsJ7v8Pa+UHQ5
wM1Mr0y1sNgXtxWT2ejAR/a3AXVij88xFZ11WGEyJmOgMnH8cdoMay0HA+riHn/X
9NgciL4se5Kz6OE+rAjlCln5xnQkNzZRQtHUEdrQerHTDwC6DwIDAQABo4IBGDCC
ARQwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcD
ATAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBTArGHGBLaIFPajSd8FmiCRZ3yf9TAf
BgNVHSMEGDAWgBQk6FNXXXw0QIep65TbuuEWePwppDBABggrBgEFBQcBAQQ0MDIw
MAYIKwYBBQUHMAGGJGh0dHA6Ly9vY3NwLmNsb3VkZmxhcmUuY29tL29yaWdpbl9j
YTAZBgNVHREEEjAQgg5vdGEubmV3YXJlLmRldjA4BgNVHR8EMTAvMC2gK6Aphido
dHRwOi8vY3JsLmNsb3VkZmxhcmUuY29tL29yaWdpbl9jYS5jcmwwDQYJKoZIhvcN
AQELBQADggEBAL2Kqq+7bIrlMMyx8Yv5eTdAzOd/AgGniWJol+kd5jDTY30zXPVo
ZZQSExzxqOUfiVPGV66ioJEz6xztLAfJ/GytGTvSo4k/8hwYvUvDjeGjlnX9JdXL
YF7TeXiMOAwZE7w+dvuzpS9Zefm2L9O/aRrx/WWwK28RVlFhrfUgQl6Uk25mVNZ3
HEumt+Yokarb+qHe7S/p53Au5jPQe1uj6gycfhMeusLHSykLdn5uxxcNKQxlPdN9
qtRI4sW1t1rsWXtgFLAE5abjyUT2hg1S+5oCrlHqv+2+z5UwhDxwNnFCC42TRgNN
3KQGDO7KW/GHdDdlnhik+LJ9GbbT19EuA60=
-----END CERTIFICATE-----`


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

var credentials = { key: privateKey, cert: certificate };
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

httpsServer.listen(443);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}